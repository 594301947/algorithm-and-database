(N&1)表示N的二进制的最后一位&1
	(N&1)==0  如果N的二进制的最后一位是0
	(N&1)==1  如果N的二进制的最后一位是1
=============
如何求75的二进制？
    for (int N = 75; N>0; N = N >> 1){
	cout << (N & 1) << endl;   //75二进制的"逆序"
    }
10 ^ 75
= 10 ^ 1001011(75的二进制)
= 10 ^ 64 * 10 ^ 8 * 10 ^ 2 * 10 ^ 1
10 ^ 1-->10 ^ 2-->10 ^ 4-->10 ^ 8-->10 ^ 16-->10 ^ 32-->10 ^ 64
    将N转化成二进制形式，先求出10 ^ 1，根据两个10 ^ 1可以求出10 ^ 2，再根据两个10 ^ 2可以求出10 ^ 4，依次……；
如果对应二进制的位置为1，则累乘。
=============
【题目1】:pow(num,N)
给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方
要求：实现时间复杂度为O(logN)的方法
double Power(double base, int exponent) {
	if (exponent == 0)
		return 1;
	int m = abs(exponent);
	double ret = 1;
	while (m>0){
		if ((m & 1) != 0)
			ret = ret*base;
		m = m >> 1;
		base = base*base;
	}
	return exponent>0 ? ret : 1 / ret;  //如果exponent是负数，返回1/ret
}
