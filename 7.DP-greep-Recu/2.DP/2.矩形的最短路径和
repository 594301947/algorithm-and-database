
题目： 
给定一个矩阵m，从左上角开始每次只能向右或者向下走，最后到达右下角的为止，路径上所有的数字累加起来就是路径和，返回所有路径中的最小的路径和。 
      举例： 
      1 3 5 9 
      8 1 3 4 
      5 0 6 1 
      8 8 4 0 
路径1,3,1,0,6,1,0是所有路径中路径和最小的，所以返回12. 

DP表示：到达Vec[i][j]位置时，最短路径：
	DP[i][j] = Vec[i][j] + min( DP[i-1][j],DP[i][j-1] )

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int getMin(vector<vector<int>> Vec){
	int M = Vec.size(); //行数
	int N = Vec[0].size();//列数
	if (M <= 0 || N <= 0)
		return -1;

	vector<vector<int>> DP = Vec; //创建一个和Vec一样大的二维数组
	for (int i = 1; i < N; i++)  //初始化:第0行
		DP[0][i] = DP[0][i - 1] + Vec[0][i];
	for (int i = 1; i < M; i++)  //初始化:第0列
		DP[i][0] = DP[i - 1][0] + Vec[i][0];
	for (int i = 1; i < M; i++){
		for (int j = 1; j < N; j++){
			DP[i][j] += min(DP[i - 1][j], DP[i][j - 1]);
		}
	}
	return DP[M - 1][N - 1];
}

int main(){
	vector<vector<int>> Vec = {
		{1,3,5,9},
		{8,1,3,4}, 
		{5,0,6,1},
		{8,8,4,0}
	};
	int ret = getMin(Vec);
	cout << "最短路径和 = " << ret << endl;
	system("pause");
}
