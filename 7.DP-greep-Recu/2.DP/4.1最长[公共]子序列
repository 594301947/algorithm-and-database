
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;

//1.获得DP: DP[i][j]的含义——>str1[0~i]与str2[0~j]的最长公共子序列的长度
vector<vector<int>> getDP(string str1, string str2){ 
	if (str1 == "" ||str2=="" )
		return vector<vector<int>>();

	int M = str1.length(); 
	int N = str2.length();
	
	vector<vector<int>> DP(M, vector<int>(N, 0));  //二维数组，行数=M,列数=N,初始化全为0
	
	//初始化:第一行和第一列
	DP[0][0] = (str1[0] == str2[0]) ? 1 : 0;  //初始化第一个DP[0][0]
	for (int i = 1; i < M; i++){ //初始化第一列
		DP[i][0] = str1[i] == str2[0] ? 1 : (DP[i - 1][0] == 1) ? 1 : 0;
	}
	for (int i = 1; i < N; i++){ //初始化第一行
		DP[0][i] = str1[0] == str2[i] ? 1 : (DP[0][i - 1] == 1) ? 1 : 0;
	}
	//初始化剩下的元素:[1,M]行, [1,N]列---->两种情况
	for (int i = 1; i < M; i++){
		for (int j = 1; j < N; j++){
			if (str1[i] == str2[j]) // case1:str1[i]=str2[j]
				DP[i][j] = DP[i - 1][j - 1] + 1; //DP[i-1][j-1]左上角值+1
			else // case2:str1[i]!=str2[j]
				DP[i][j] = max(DP[i - 1][j], DP[i][j - 1]); //获取最大值
		}
	}
	return DP;
}

//2.根据DP求出最长递增子序列
vector<char> getLCS(vector<vector<int>> DP, string str1, string str2) { 
	int M = DP.size();
	int N = DP[0].size();
	if (M <= 0 || N <= 0)
		return vector<char>();

	vector<char> ret;

	int i = M - 1;  //str1
	int j = N - 1;  //str2

	while (i >= 0 && j >= 0){
		if (str1[i] == str2[j]){
			ret.push_back(str1[i]);  //ret.push_back(str2[i]);
			i--; j--;
		}
		else{
			if (j > 0 && DP[i][j] == DP[i][j - 1]){
				j--;
			}
			if (i > 0 && DP[i][j] == DP[i - 1][j]){
				i--;
			}
		}
	}
	return ret;
}

int main(){
	string str1 = "1A2C3D4B56";
	string str2 = "B1D23CA45B6A";
	
	vector<vector<int>> DP = getDP(str1, str2);
	
	vector<char> ret = getLCS(DP, str1, str2);
	for (auto node : ret)
		cout << node << "   ";
	
	system("pause");
}
