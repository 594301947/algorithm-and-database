注意：一定不要把字母放在树的节点上，而是放在树的路径上
    [
        "树的路径"表示: 字母对应的nexts[]指针数组的index
            树的路径本代码中固定范围: a~z
            实际上可以用哈希表实现:map<char,int>
    ]


使用abc, bce, abd，bef，be，be创建前缀树
(1)遍历abc时，从T节点开始:
    如果没有到达某个节点的路，就创建,path++
    如果有到达某个节点的路，就复用,path++
    到达字符串结尾时，将end++
(2)遍历bce时，从T节点开始
    过程同上
(3)遍历abd时，从T节点开始
    过程同上
(4)遍历bef时，从T节点开始
    过程同上
4个字符串遍历完毕后，前缀树创建完毕！
                  [O]
                a     b
             [O]       [O]
           b          e   c     
        [O]         [0]   [O]
       c   d        f       e
     [0]    [0]   [0]       [0] 
其中：
    [0]：表示树节点
    a,b,c...字母：表示路径--->(a~z)：本文用0~25表示a~z路径


【用途】
    假设前缀树中已经安插了N个字符串，给定一个字符串str，可以在前缀树中很方便的进
行下面操作：
	(1)查找指定字符串出现的次数
	(2)查找指定字符串作为前缀的次数
上面的操作都是建立（插入字符串）基础上的

#include<iostream>
#include <string>
using namespace std;

#define MAX_NEXTS 26
//前缀树节点
class TrieNode{
public:
	TrieNode():path(0),end(0){
		memset(nexts, NULL, MAX_NEXTS);
	}
public:
	int path; //划过该节点字符串的数目
	int end; //以该节点为结尾的字符串的个数
	TrieNode* nexts[MAX_NEXTS]; //a~z表示的路径
};

class TrieTree{
public:
	TrieTree(){
		root = new TrieNode();
	}
	void insertStr(string str){ //将字符串str插入前缀树root中
		if (str == "")
			return;

		TrieNode* cur = root;
		for (int i = 0; i < str.length(); i++){ //依次遍历每个字符str[i]
			int landIndex = str[i] - 'a';//寻找str[i]字母的插入路径landIndex
			
			if (cur->nexts[landIndex] == NULL) //如果插入路径指向的树节点是空，说明没有该路径
				cur->nexts[landIndex] = new TrieNode(); //就创建新节点，插入到landIndex下

			cur = cur->nexts[landIndex];
			cur->path++; //又出现一个新的字符串划过该节点，因此path++
		}
		cur->end++; //当while循环结束后，cur指向的节点的end位置++
	}
	//查询给定字符串str出现的次数:实际上是字符串达到末尾时，cur->end的大小
	int getStrNum(string str){
		if (str == "")
			return 0;
		TrieNode* cur = root;
		for (int i = 0; i < str.length(); i++){
			int landIndex = str[i] - 'a'; //计算str[i]的路径landIndex
			if (cur->nexts[landIndex] == NULL) //如果路径指向的节点为NULL，说明str不存在，返回0
				return 0;
			cur = cur->nexts[landIndex]; //cur后移
		}
		return cur->end;
	}
	//查询以给定字符串prestr为前缀的字符串总数:实际上是字符串到达末尾时，cur->path的大小
	int getPreNum(string str){
		if (str == "")
			return 0;
		TrieNode* cur = root;
		for (int i = 0; i < str.length(); i++){
			int landIndex = str[i] - 'a'; //计算str[i]的路径landIndex
			if (cur->nexts[landIndex] == NULL) //如果路径指向的节点为NULL，说明str不存在，返回0
				return 0;
			cur = cur->nexts[landIndex]; //cur后移
		}
		return cur->path;
	}
	void deleteStr(string str){ //仅仅删除str一次（实际上删除的是每个str[i]的path）
		if (getStrNum(str) == 0) //如果不存在str
			return;

		TrieNode* cur = root;
		for (int i = 0; i < str.length(); i++){ //遍历每一个str[i]
			int landIndex = str[i] - 'a'; //求出查找路径landIndex
			if (cur->nexts[landIndex]->path == 0){//如果经过(landIndex路径指向的节点)的path数等于0
				//后面的直接返回，释放开辟的内存空间
				return;
			}
			cur->nexts[landIndex]->path--;
			cur = cur->nexts[landIndex];//后移
		}
		cur->end--;//因为删除了字符串str，因此cur的end值--
	}
public:
	TrieNode* root;
};
int main(){
	TrieTree* trie = new TrieTree();
	trie->insertStr("abc");
	trie->insertStr("abc");
	trie->insertStr("abcf");
	trie->insertStr("abcd");

	int ret1 = trie->getStrNum("abc");
	int ret2 = trie->getPreNum("abc");
	
	trie->deleteStr("abc");

	int ret3 = trie->getStrNum("abc");
	int ret4 = trie->getPreNum("abc");
}
