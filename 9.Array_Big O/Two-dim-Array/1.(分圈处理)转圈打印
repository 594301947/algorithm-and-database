1.递归
void printVec(vector<vector<int>> vec, int x1, int y1, int x2, int y2){
	if (x1 > x2 || y1 > y2)
		return;
	if (x1 == x2){
		for (int i = y1; i <= y2; i++)
			cout << vec[x1][i] << " ";
		return;
	}
	if (y1 == y2){
		for (int i = x1; i <= x2; i++)
			cout << vec[i][y1] << " ";
		return;
	}
	for (int i = y1; i <= y2-1; i++)
		cout << vec[x1][i] << " ";
	for (int i = x1; i <= x2-1; i++)
		cout << vec[i][y2] << " ";
	for (int i = y2; i>=y1+1; i--)
		cout << vec[x2][i] << " ";
	for (int i = x2; i >= x1 + 1;i--)
		cout << vec[i][y1] << " ";
	printVec(vec, ++x1, ++y1, --x2, --y2);
}
int main(){
	vector<vector<int>> vec = {
		{ 1 }, { 2 }, {3}
	};
	printVec(vec, 0, 0, vec.size() - 1, vec[0].size() - 1);
}

2.非递归
#include<iostream>
#include<vector>
using namespace std;

void spiralOrderPrint(vector<vector<int>> matrix, int tlx, int tly, int brx, int bry){
	if (tlx == brx){
		for (int i = tly; i <= bry; i++)
			cout << matrix[tlx][i] << "   ";
	}
	else if (tly == bry){
		for (int i = tlx; i <= brx; i++)
			cout << matrix[i][tly] << "   ";
	}
	else{
		for (int i = tly; i <= bry; i++)
			cout << matrix[tlx][i] << "   ";
		for (int i = tlx+1; i <= brx; i++)
			cout << matrix[i][bry] << "   ";
		for (int i = bry-1; i >= tly; i--)
			cout << matrix[brx][i] << "   ";
		for (int i = brx-1; i >= tlx+1; i--)
			cout << matrix[i][tly] << "   ";
	}
}
void printMatrix(vector<vector<int>> matrix) {
	int M = matrix.size();  //行数
	int N = matrix[0].size(); //列数
	//定义四个变量，分别表示矩形左上角和右下角
	int tlx = 0, tly = 0;
	int brx = M - 1, bry = N - 1;
	while (tlx <= brx && tly <= bry){
		spiralOrderPrint(matrix, tlx++, tly++, brx--, bry--);//打印外圈
	}
}
int main(){
	vector<vector<int>> V1 = { { 1, 2, 3, 4 }, { 5, 6, 7, 8 }, { 9, 10, 11, 12 }};
	printMatrix(V1);
	system("pause");
}
