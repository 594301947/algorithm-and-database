
思想：
    1.前序遍历，找T1->data==T2->data的节点
    2.找到T1->data==T2->data的节点后，判断以T1和T2为根的树，是否T1包含T2

#include <iostream>
using namespace std;
typedef struct TreeNode{
	struct TreeNode* left;
	struct TreeNode* right;
	int data;
}TreeNode;
//使用前序遍历创建一颗二叉树
TreeNode* createByPre(){
	int data;
	cin >> data;
	if (data == 0) //输入值为0
		return NULL;
	TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
	newNode->data = data;
	newNode->left = createByPre();
	newNode->right = createByPre();
	return newNode;
}
//2.找到T1->data==T2->data的节点后，判断以T1和T2为根的树，是否T1包含T2
bool judge(TreeNode* T1, TreeNode* T2){
	if (!T2)
		return true;
	if (T1&&T2&&T1->data == T2->data) //如果当前节点符合条件，则递归向下判断
		return judge(T1->left, T2->left) && judge(T1->right, T2->right);
	return false;
}
bool T1containT2(TreeNode* T1, TreeNode* T2){ //1.前序遍历，找到T1->data==T2->data的节点
	bool ret = false;
	if (T1 && T2){
		if (T1->data == T2->data)
			ret = judge(T1, T2); 
		if (ret == false)
			ret = T1containT2(T1->left, T2); 
		if (ret == false)
			ret = T1containT2(T1->right, T2); 
	}
	return ret;
}
int main(){
	TreeNode* T1 = createByPre(); //1 2 4 0 0 0 3 5 0 0 6 0 0 
	TreeNode* T2 = createByPre(); //3 4 0 0 0
	bool ret = T1containT2(T1, T2);
}
