
//使用前序遍历创建一颗二叉树BTree
TreeNode* createByPre(){
	int data;
	cin >> data;
	if (data == 0) //输入值为0
		return NULL;
	TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode)); newNode->data = data; //创建newNode
	newNode->left = createByPre(); //递归创建newNode->left
	newNode->right = createByPre();//递归创建newNode->right
	return newNode;
}


/*
	! 表示字符之间的分割符号
	# 表示NULL
*/


//[1]先序遍历序列化: BTree--->string
string serialByPre(TreeNode* T){
	if (T == NULL)
		return "#!";
	string str = T->data + "!";   //序列化当前节点
	str += serialByPre(T->left);  //序列化当前节点的左子树
	str += serialByPre(T->right); //序列化当前节点的右子树
	return str;
}


//[2]先序遍历反序列化: string--->BTree
TreeNode* reconByPre(queue<string>& Q){
	string tmp = Q.pop(); //出队
	if (tmp == "#")
		return NULL;
	TreeNode* newNode = new TreeNode; newNode->data = string2int(tmp); //创建当前节点
	newNode->left = reconByPre(Q); //创建当前节点的左孩子
	newNode->right = reconByPre(Q);//创建当前节点的右孩子
	return newNode;
}
TreeNode* ReconSerial(string str){
	string sArr[] = str.split("!");//将字符串按照!分割，分割结果存在sArr数组中 
	queue<string> Q;
	for (int i = 0; i < sArr.length; i++)//将values数组中的数全部进队
		Q.push(sArr[i]);
	return reconByPre(Q); //调用先序反序列化函数
}
