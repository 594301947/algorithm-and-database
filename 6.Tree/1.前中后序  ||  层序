（1）前序遍历创建二叉树
（2）遍历：前，中，后，层

#include<iostream>
#include<stack>
#include<queue>
using namespace std;

typedef struct TreeNode{
	int data;
	struct TreeNode* left;
	struct TreeNode* right;
}TreeNode;

//使用前序遍历创建一颗二叉树
TreeNode* createByPre(){
	int data;
	cin >> data;
	if (data == 0) //输入值为0
		return NULL;
	TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
	newNode->data = data;
	newNode->left = createByPre();
	newNode->right = createByPre();
	return newNode;
}

/*-----(先/中/后)遍历-----*/
void PreTravel(TreeNode* T){
	if (T){
		printf("%d  ", T->data);
		PreTravel(T->left);
		PreTravel(T->right);
	}
}
void InOrderTravel(TreeNode* T){
	if (T){
		InOrderTravel(T->left);
		printf("%d  ", T->data);
		InOrderTravel(T->right);
	}
}
void PostTravel(TreeNode* T){
	if (T){
		PostTravel(T->left);
		PostTravel(T->right);
		printf("%d  ", T->data);
	}
}
/*非递归遍历
1.都是在pop时搞事情: 打印 | 进辅助栈
2.中序: 先将所有的左孩子全部进栈
3.先序/后序的唯一区别: 
	(1)后序有辅助栈help
	(2)push时: 先序是先右孩子再左孩子；后序是先左孩子再右孩子
	(3)pop时: 先序是打印；后序是进辅助栈
*/
void PreTravelUnRecur(TreeNode* T){ //先序遍历
	if (T == NULL)
		return;
	stack<TreeNode*> S;
	S.push(T);
	while (!S.empty()){
		TreeNode* p = S.top(); S.pop(); printf("%d  ",p->data); //printf
		if (p->right) //先右
			S.push(p->right);
		if (p->left)  //后左
			S.push(p->left);
	}
}
void PostTravelUnRecur(TreeNode* T){//后序遍历
	if (T == NULL)
		return;
	stack<TreeNode*> S;
	stack<TreeNode*> help; //多了一个辅助栈help

	S.push(T);
	while (!S.empty()){
		TreeNode* p = S.top(); S.pop(); help.push(p); //数据不打印，让数据进辅助栈help
		if (p->left)   //先左
			S.push(p->left);
		if (p->right)  //后右
			S.push(p->right);
	}
	while (!help.empty()){ //将help打印
		TreeNode* tmp = help.top(); help.pop(); printf("%d  ", tmp->data);
	}
}
void InOrderTravelUnRecur(TreeNode* T){ //中序遍历
	if (T == NULL)
		return;
	stack<TreeNode*> S;
	TreeNode* p = T;
	while (p || !S.empty()){
		if (p){ //p为真，p进栈，再让p指向p->left
			S.push(p); p = p->left;
		}
		else{ //p为空时，出栈，并打印
			p = S.top(); S.pop(); printf("%d  ", p->data);
			p = p->right;
		}
	}
}

/*-----层序遍历-----*/
void LevelTravel(TreeNode* T){
	if (T == NULL)
		return;
	queue<TreeNode*> Q;
	Q.push(T);
	while (!Q.empty()){
		TreeNode* cur = Q.front(); Q.pop(); printf("%d  ", cur->data);
		if (cur->left)
			Q.push(cur->left);
		if (cur->right)
			Q.push(cur->right);
	}
}

int main(){
	TreeNode* T = createByPre(); //input: 1 2 0 4 0 0 3 5 0 0 0

//遍历方式
	printf("-------层序遍历------\n");
	LevelTravel(T);

	printf("\n-------先序遍历------\n");
	PreTravel(T);
	printf("\n");
	PreTravelUnRecur(T);
	
	printf("\n-------中序遍历------\n");
	InOrderTravel(T);
	printf("\n");
	InOrderTravelUnRecur(T);

	printf("\n-------后序遍历------\n");
	PostTravel(T);
	printf("\n");
	PostTravelUnRecur(T);

	system("pause");
}
