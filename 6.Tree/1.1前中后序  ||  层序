

#include<assert.h>
#include <iostream>
#include<queue>
#include<stack>
#include<map>
#include<unordered_set>
#include<unordered_map>
#include<vector>
#include<string>
using namespace std;
typedef struct TreeNode{
	struct TreeNode* left;
	struct TreeNode* right;
	int data;
}TreeNode;
//使用前序遍历创建一颗二叉树
TreeNode* createByPre(){
	int data;
	cin >> data;
	if (data == 0) //输入值为0
		return NULL;
	TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
	newNode->data = data;
	newNode->left = createByPre();
	newNode->right = createByPre();
	return newNode;
}
/*-----(先/中/后)遍历-----*/
void PreTravel(TreeNode* T){
	if (T){
		printf("%d  ", T->data);
		PreTravel(T->left);
		PreTravel(T->right);
	}
}
void InOrderTravel(TreeNode* T){
	if (T){
		InOrderTravel(T->left);
		printf("%d  ", T->data);
		InOrderTravel(T->right);
	}
}
void PostTravel(TreeNode* T){
	if (T){
		PostTravel(T->left);
		PostTravel(T->right);
		printf("%d  ", T->data);
	}
}
void preOrder(TreeNode* T){ //先序遍历
	if (T == NULL)
		return;
	stack<TreeNode*> S;
	TreeNode* p = T;
	while (p || !S.empty()){
		if (p){
			S.push(p); printf("%d  ", p->data);
			p = p->left;
		}
		else{
			p = S.top(); S.pop();
			p = p->right;
		}
	}
}
void inOrder(TreeNode* T){//中序遍历
	if(T == NULL)
		return;
	stack<TreeNode*> S;
	TreeNode* p = T;
	while (p || !S.empty()){
		if (p){
			S.push(p); 
			p = p->left;
		}
		else{
			p = S.top(); S.pop(); printf("%d  ", p->data);
			p = p->right;
		}
	}
}

void postOrder(TreeNode* T){
	if (!T)
		return;
	stack<TreeNode*> S;
	stack<TreeNode*> helpS;
	S.push(T);
	while (!S.empty()){
		TreeNode* cur = S.top(); S.pop(); helpS.push(cur);
		if (cur->left)
			S.push(cur->left);
		if (cur->right)
			S.push(cur->right);
	}
	while (!helpS.empty()){
		printf("%d  ", helpS.top()->data); helpS.pop();
	}
}
void levelOrder(TreeNode* T){
	if (!T)
		return;
	queue<TreeNode*> Q;
	Q.push(T);
	while (!Q.empty()){
		TreeNode* cur = Q.front(); Q.pop(); printf("%d  ", cur->data);
		if (cur->left)
			Q.push(cur->left);
		if (cur->right)
			Q.push(cur->right);
	}
}

void levelOrderTravel(TreeNode* T){
	if (!T)
		return;
	queue<TreeNode*> Q;
	Q.push(T);

	TreeNode* last = T;
	TreeNode* nlast = NULL;
	while (!Q.empty()){
		TreeNode* cur = Q.front(); Q.pop();  printf("%d  ", cur->data);
		if (cur->left){
			Q.push(cur->left);
			nlast = cur->left;
		}
		if (cur->right){
			Q.push(cur->right);
			nlast = cur->right;
		}
		if (cur == last){
			last = nlast;
			printf("\n");
		}
	}
}
int main(){
	 TreeNode* T = createByPre(); //1 2 0 4 0 0 3 5 0 0 0

	 preOrder(T);
	 cout << endl;
	 inOrder(T);
	 cout << endl;
	 postOrder(T);
	 cout << endl;
	 levelOrderTravel(T);
	 cout << endl;
}

先  1  2  4  3  5
中  2  4  1  5  3
后  4  2  5  3  1
层
1
2  3
4  5
