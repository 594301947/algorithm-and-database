设计一个getMin功能的栈
要求：
  pop,push,getMin操作的时间复杂度都是O(1)
  设计的栈类型可以使用现有的栈结构

答案：使用辅助栈minStack，保证minStack的栈顶元素始终是stackData的最小值

#include<iostream>
#include<stack>
using namespace std;

class myStack{
private:
	stack<int> stackData;
	stack<int> stackMin;
public:
	void push(int data){
		if (stackData.empty()){//1.如果栈为空，直接插入
			stackMin.push(data);
		}
		else{
			//2.选择stackMin.top()和data，插入到stackMin中
			int minNum = stackMin.top() < data ? stackMin.top() : data;
			//插入
			stackMin.push(minNum);
		}
		stackData.push(data);
	}
	void pop(){
		if (!stackData.empty()){
			stackData.pop();
			stackMin.pop();
		}
	}
	int getMin(){
		return stackMin.top();
	}
};

int main(){
	myStack my;
	my.push(1);
	my.push(2);
	my.push(-10);
	my.push(3); my.push(3);
	int ret = my.getMin();
}
