/*
shared_ptr:多个sharedptr中的ptr指向“同一”对象，共享对象
	拷贝:引用计数++
	赋值:注意自身赋值
	析构:当引用计数减到0才释放空间，否则只需将引用计数减1
	
unique_ptr	
  实现了独占式拥有概念，意味着它可确保一个对象和其相应资源同一时间只被一个指针拥有。一旦拥有者被
	销毁或变成空，或开始拥有另一个对象，先前拥有的那个对象就会被销毁，其任何相应资源也会被释放。
*/

#include <iostream>
using namespace std;

template<class T>
class Smartptr{
public:
	Smartptr(T* p){
		ptr = p;
		cnt = new int(1); 
	}
	~Smartptr(){
		if (--(*cnt) == 0){//当引用计数为0时，才真正的析构
			delete cnt; cnt = NULL;
			delete ptr; ptr = NULL;
		}
	}
public:
	Smartptr(const Smartptr& ano){//拷贝构造：ano指向的值++
		ptr = ano.ptr; //指针
		cnt = ano.cnt;  ++*cnt; //引用计数
	}
	Smartptr& operator=(const Smartptr& ano){ //赋值运算符：this指向的值--，ano指向的值++
		if (this == &ano) //1.防止自身拷贝
			return *this;
		//2.this的引用计数先--
		if (--*cnt == 0){ //判断是否为0
			delete cnt; cnt = NULL;
			delete ptr; ptr = NULL;
		}
		//3.this指向新世界ano
		++*(ano.cnt);
		cnt = ano.cnt;
		ptr = ano.ptr;
		//4.返回
		return *this;
	}
	Smartptr* operator->(){
		if (ptr)
			return ptr;
	}
	Smartptr& operator*(){
		if (ptr)
			return *ptr;
	}
private:
	int* cnt;
	T* ptr;
};
int main(){
	Smartptr<int> p1(new int(0));
	p1 = p1;
	Smartptr<int> p2(p1);
	Smartptr<int> p3(new int(1));
	p3 = p1;
}
