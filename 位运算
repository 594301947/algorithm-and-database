算数运算符
+ - * / %
位运算符
& | ^ << >> >>>

num&1:表示求最低位的二进制码
>>:除以2
<<:乘以2

^异或运算
    不同才为真（1），否则为假（0）
    例如两个2进制数异或
    10110100
    01101010
 -----------
    11011110

1的原码
    0000 0001  //第一个符号为位0
结论：
    整数和0的二进制的第一位是0
    负数的二进制的第一位是1

判断32位的整数a，是不是负数？
    return (a>>31)&1; //负数，返回1；非负数，返回0

判断一个数N是否为负数？
  (N的二进制位的第一位 & 1)，如果：
      等于1，是负数
      等于0，是非负数

1.不适用额外地变量交换a和b的值
    a^a=1
    ^中的所有项可以随意交换位置
2.32位的整数a和b，求较大值（但是不能用任何比较运算）
法1：得到a-b的符号，根据符号决定返回a或者b；如果a-b是+或者0，返回a；否则，返回b

int flip(int N){
  return N^1; //^1表示二进制取反
}
int sign(int N){  //获取32位整数的符号;负数返回1；不是负数返回0
  return flip((n>>31)&1);
}
int getMax(int a,int b){
  int c=a-b;
  int A=sign(c);  //c为负数，返回1，表示b大；c不是负数，返回0，表示a大
  int B=flip(A);  //
  return a*A+b*B;  //A和B一个为1，一个为0
} 
