冒泡
选择
快速

#include<iostream>
#include<time.h>
using namespace std;
void printA(int A[], int n){
	for (int i = 0; i < n; i++)
		cout << A[i] << "   ";
	cout << endl;
}
void swap(int* data, int i, int j){ //交换数组中的两个元素
	if (i == j)
		return;
	data[i] ^= data[j];
	data[j] ^= data[i];
	data[i] ^= data[j];
}

void bubble_sort(int A[], int n){
	for (int i = 0; i < n - 1; i++){//进行n-1趟
		bool flag = false;//标记该趟是否发生了交换
		for (int j = 0; j < n - 1 - i; j++){//每趟确定一个最大值末尾(终端)
			if (A[j]>A[j + 1]){
				swap(A, j, j + 1);
				flag = true;
			}
		}
		if (flag == false)
			break;
	}
}
void select_sort(int A[], int n){
	for (int i = 0; i < n - 1; i++){//进行n-1趟
		int min = i;
		for (int j = i + 1; j < n; j++){
			if (A[min]>A[j])
				min = j;
		}
		if (min != i)//当min不等于初始的i，说明min发生变化-->交换
			swap(A, min, i);
	}
}
int binary_search(int A[], int n, int key){//二分查找
	int l = 0, r = n - 1;
	while (l <= r){
		int mid = (l + r) / 2;
		if (A[mid] == key)
			return mid;
		else if (A[mid] > key)
			r = mid - 1;
		else
			l = mid + 1;
	}
	return -1; //没查找到
}
int partition(int A[], int l, int r){
	int pivot = A[l]; //将第一个元素设为基准
	while (l < r){
		while (l < r&&pivot <= A[r])
			r--;
		A[l] = A[r];

		while (l < r&&pivot >= A[l])
			l++;
		A[r] = A[l];
	}
	A[l] = pivot;
	return l;
}
void quick_sort(int A[], int l, int r){ //快速排序
	if (l < r){
		int pivot = partition(A, l, r);
		quick_sort(A, l, pivot - 1);
		quick_sort(A, pivot + 1, r);
	}
}
void rand_quick_sort(int A[], int l, int r){ //随机快速排序
	if (l < r){
		//随机获取基准下标
		srand(time(NULL)); //1.获取[l,r]中的随机数k
		int k = rand() % (r - l + 1) + l;
		swap(A, l, k); //2.将A[k]与A[l]交换

		//快速排序
		int pivot = partition(A, l, r);
		quick_sort(A, l, pivot - 1);
		quick_sort(A, pivot + 1, r);
	}
}
void test02(){//随机快速排序
	int A[] = { 1, 3, 5, 6, 2, 4, 9, 10 };
	int len = sizeof(A) / sizeof(A[0]);
	rand_quick_sort(A, 0, len - 1);
	printA(A, len);
}
int main()
{
	test02();
	system("pause");
}
