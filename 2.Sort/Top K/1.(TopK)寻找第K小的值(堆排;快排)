方法1：堆排序,时间复杂度O(N*lgK)
	(1)建立大小为K的小根堆
	(2)将第K+1，N个数，依次放入小根堆
	(3)最后输出堆中的所有的元素，即为最小的前K个数

方法2：快速排序,时间复杂度O(N)

int partition(int A[], int l, int r){
	int pivot = A[l];
	while (l < r){
		while (l < r && A[r] >= pivot)
			r--;
		A[l] = A[r];
		while (l < r && A[l] <= pivot)
			l++;
		A[r] = A[l];
	}
	A[l] = pivot;
	return l;
}
int search_min_K(int A[], int l, int r, int K){ //返回的是第K小的数的下标
	if(l < r){
		int pos = partition(A, l, r);
		int m = pos - l + 1;    
		if (m == K)  
			return pos;
		else if (m > K)  
			return search_min_K(A, l, pos - 1, K);
		else  
			return search_min_K(A, pos + 1, r, K - m);
	}
}
void getTopK(int A[], int N, int Kth){
	int ret = search_min_K(A, 0, N - 1, Kth);
	cout << "第" << Kth << "th小的数 = " << A[ret] << endl;
	cout << "前" << Kth << "th小的数 = " << endl;;
	for (int i = 0; i <= ret; i++)
		cout << "              " << A[i] << endl;
}
int main(){
	int A[] = { 14, 13, 12, 11, 1, 3, 2, 4, 6, 5, 7, 9, 8, 10 };
	int N = sizeof(A) / sizeof(A[0]);
	int Kth = 9;
	getTopK(A, N, Kth);
}
