打印N个有序数组整体最大的TopK
例如，输入含有N行元素的二维数组可以代表N个一维数组
219，405，538，845，971
148，558
52，99，348，691
再输入整数k=5，则打印：
Top5: 971，845，691，558，538

核心：PQ中存放的元素pair<int,int>--><元素值, 元素来自哪个数组>

1.构建一个大小为N的大顶堆<元素值，元素来自哪个数组>
2.取出并打印当前堆顶元素top，必然是最大值，获得top来自哪个数组top.second
3.1如果vec[top.second].size()!=0--->将vec[top.second]的下一个元素继续入队
3.2如果vec[top.second]==0,不操作
4.执行步骤2~3，直到打印前K个。

vector<int> getTopK(vector<vector<int>> vec,int K){
	vector<int> ret;
	priority_queue<pair<int,int>> PQ;
	//用vec[i].back()建立大根堆PQ
	for (int i = 0; i < vec.size(); i++){
		PQ.emplace(vec[i].back(),i);
		vec[i].pop_back();
	}
	while(K-- && !PQ.empty()){
		//取出PQ堆顶元素top
		pair<int, int> top = PQ.top(); PQ.pop();
		ret.push_back(top.first);
		//将top.second数组的末尾元素，加入PQ:需要判断是否为空
		int index = top.second;
		if (!vec[index].empty()){
			PQ.emplace(vec[index].back(), index);
			vec[index].pop_back();
		}
	}
	return ret;
}

//求K个数组的前K大数
int main(){
	vector<vector<int>> vec = {
		{ 2, 5, 6, 6, 8, 10 },
		{ 1, 5, 6, 9 },
		{ 1, 4, 7, 7 }
	};
	vector<int> ret = getTopK(vec,5);
	for (auto node : ret)
		cout << node << endl;
	system("pause");
}
