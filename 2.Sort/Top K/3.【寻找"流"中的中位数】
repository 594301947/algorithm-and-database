必须保证小根堆中的最小元素 >= 大根堆中的最大元素
（即：小根堆的堆顶 >= 大根堆的堆顶）

依次取出流中的数vec[i]，向大根堆/小根堆中放：
1.先放入大根堆，再放入小根堆；再放入大根堆，再放入小根堆；... ...，直到全部放完
2.1将vec[i]放入大根堆之前，要拿小根堆的堆顶元素Top与vec[i]比较
	如果vec[i]<Top，则vec[i]直接放入大根堆
	如果vec[i]>Top，则将Top放入大根堆；将vec[i]放入小根堆
2.2将vec[i]放入大根堆，要拿大根堆的堆顶元素Top与vec[i]比较
	如果vec[i]>Top，则vec[i]直接放入大根堆
	如果vec[i]<Top，则将Top放入小根堆；将vec[i]放入大根堆

class Solution {
public:
	Solution() :size(0){}
public:
	void Insert(int num){
		if (size%2 == 0){ //size==偶数时，插入大根堆
			if (size == 0){ //插入大根堆
				MaxPQ.emplace(num);
			}
			else{
				//判断MaxPQ
				int top = MinPQ.top();
				if (num > top){
					MinPQ.pop(); MinPQ.push(num);
					MaxPQ.push(top);
				}
				else
					MaxPQ.push(num);

			}
		}
		else{//size==奇数时，插入小根堆
			int top = MaxPQ.top();
			if (num < top){//判断num是否小于maxPQ的堆顶
				MaxPQ.pop(); MaxPQ.push(num); //删除大根堆堆顶
				MinPQ.push(top);
			}
			else
				MinPQ.push(num);
		}
		size++; //不要忘记，插入元素后，size++
	}

	double GetMedian(){
		if (size % 2 == 0)
			return (MaxPQ.top() + MinPQ.top())*1.0 / 2;
		else
			return MaxPQ.top();
	}
private:
	priority_queue<int> MaxPQ;
	priority_queue<int,vector<int>,greater<int>> MinPQ;
	int size;
};
int main(){
	Solution obj;
	obj.Insert(11);
	obj.Insert(3);
	obj.Insert(4);
	obj.Insert(20);
	obj.Insert(5);
	obj.Insert(7);
	obj.Insert(6);
	obj.Insert(8);
	double ret = obj.GetMedian();
	system("pause");
}
