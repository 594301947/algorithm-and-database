
要求：实现时间复杂度为O(logN)的方法


基础知识：//如何求75的二进制？
      for(int N=75;N>0;N=N>>1){
          cout<<(N&1)<<endl;   //75二进制的"逆序"
      }


10^75
=10^1001011(75的二进制) 
=10^64*10^8*10^2*10^1
10^1-->10^2-->10^4-->10^8-->10^16-->10^32-->10^64

将N转化成二进制形式，先求出10^1，根据两个10^1可以求出10^2，再根据两个10^2可以求出10^4，依次……；
如果对应二进制的位置为1，则累乘。

int my_POW(int num, int N){
	int res = 1;
	while (N>0){
		if ((N & 1) != 0){
			res *= num;
		}
		N = N >> 1;
		num = num*num;
	}
	return res;
}

int main(){
	int N = my_POW(2, 5);
}


为了防止越界：
	#define F 1000000007
	int my_POW(int K, int N){
		int res = 1;
		for (; N > 0; N = N >> 1){
			if ((N & 1) != 0){
				res *= K;
			}
			res %= F;
			K = (K*K) % F;
		}
		return res;
	}
	int main(){
		int N = my_POW(-2, 4);
	}
