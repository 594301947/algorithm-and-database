（1.1）对于一个有序数组arr，再给定一个整数num，请在arr中找到num这个数出现的最左边的位置。
（1.2）对于一个有序数组arr，再给定一个整数num，请在arr中找到num这个数出现的次数。
（2）有一个有序数组arr，其中不含有重复元素，请找到满足arr[i]==i条件的位置
（3）有序的数组A和 target，要求找出 A 中大于 target 的最小数字，如果找不到就返回第1个数字
//(1.1)和(2)的解法的唯一区别:
	判断条件不同：
		if (A[mid] == num)
		if (A[mid] == mid)


（1.1）对于一个有序数组arr，再给定一个整数num，请在arr中找到num这个数出现的最左边的位置。
int getPartMinV(int A[], int N, int num){
	int ret = -1;

	int l = 0, r = N - 1;
	while (l <= r){
		int mid = l + (r - l) / 2;
		if (A[mid] == num){//与二分查找，仅仅此处不同——>记录相等时的mid  二分查找是直接return mid
			ret = mid; //记录相等位置
			r = mid - 1;
		}
		else if (A[mid]>num)
			r = mid - 1;
		else
			l = mid + 1;
	}
	return ret;
}

（1.2）题目扩展：从有序数组中找出某个数出现的次数
解题思路：
	找出key出现的最左位置Lloc和最右位置Rloc
	return Rloc-Lloc+1;
//在有序数组，查找key出现的最左位置或者最右位置
int getKeyLoc(int A[], int N, int key, bool flag){
	int ret = -1;
	int l = 0, r = N - 1;
	while (l <= r){
		int mid = (l + r) / 2;
		if (A[mid] > key)
			r = mid - 1;
		else if (A[mid] < key)
			l = mid + 1;
		else { //(A[mid] == key) //如果查找到key
			if (flag == true){ //向左查找
				ret = mid;
				r = mid - 1;
			}
			else{ //向右查找
				ret = mid;
				l = mid + 1;
			}
		}
	}
	return ret;
}
int KeyCnt(int A[], int N, int key){
	int Lloc = getKeyLoc(A, N, key, true);
	int Rloc = getKeyLoc(A, N, key, false);
	if (Lloc == -1 || Rloc == -1) //没有查找到
		return 0;
	return Rloc - Lloc + 1;
}
int main(){
	int A[] = { 1, 2, 2, 2, 2, 3, 4 };
	int N = sizeof(A) / sizeof(A[0]);
	int ret = KeyCnt(A, N, 2);
}


（2）有一个有序数组arr，其中不含有重复元素，请找到满足arr[i]==i条件的位置
int findAi_i(int A[], int N){
	int ret = -1;
	
	int l = 0, r = N - 1;
	while (l <= r){
		int mid = l + (r - l) / 2;
		if (A[mid] == mid){
			ret = mid;  //记录相等位置
			r = mid - 1;
		}
		else if (A[mid]>mid)
			r = mid - 1;
		else
			l = mid + 1;
	}
	return ret;
}

（3）有序的数组A和 target，要求找出 A 中大于 target 的最小数字，如果找不到就返回第1个数字
int nextGreatestLetter(int A[],int N, char target){
	int l = 0, r = N - 1;
	int ret = 0;
	while (l <= r){
		int mid = (l + r) / 2;
		if (A[mid] > target){
			ret = mid;
			r = mid - 1;
		}
		else{
			l = mid + 1;
		}
	}
	return A[ret];
}

int main(){
	int A[] = { 1, 2, 3, 3, 4, 4, 5, 6, 7, 8 };
	int ret = nextGreatestLetter(A, 10, 6);
}
