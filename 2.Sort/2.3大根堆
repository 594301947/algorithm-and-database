/*
数组的有效元素个数: N --> 最后一个节点的下标为A[N-1]
	子节点 i ---> 父节点 (i-1)/2 --> 父节点的取值范围[ ((N-1)-1)/2 ,0 ],即[N/2-1,0]
	父节点 i 
		左孩子--->2*i+1
		左孩子--->2*i+2
*/

//大根堆代码

#include<iostream>
using namespace std;

void printArr(int A[], int N){
	for (int i = 0; i<N; i++)
		cout << A[i] << "    ";
	cout << endl;
}
void swap(int A[], int a, int b){
	if (a == b) //交换之前，必须判断a和b是否相等
		return;
	A[a] ^= A[b]; A[b] ^= A[a]; A[a] ^= A[b];
}

void AdjustDown(int A[], int k, int N){ //大根堆调整
	for (int i = 2 * k + 1; i < N; i = i * 2 + 1){
		if (i + 1 < N&&A[i] < A[i + 1]) //判断是否越界
			i++;
		if (A[k] >= A[i])
			break;
		else
		{
			swap(A[i], A[k]);
			k = i;
		}
	}
}
void BuildMaxHeap(int A[], int N){
	//依次AdjustDown(最后一个分支节点N/2-1到根节点0)
	for (int i = N / 2 - 1; i >= 0; i--){
		AdjustDown(A, i, N);
	}
}
void HeapSort(int A[], int N){
	BuildMaxHeap(A, N);
	for (int i = N - 1; i >= 0; i--){
		swap(A, 0, i);//将A[0]与最后一个元素交换
		AdjustDown(A, 0, i);//向下调整A[0]
	}
}
//弹出堆顶元素A[0]；调整堆
int popData(int A[], int i){
	int ret = A[0];
	swap(A, 0, i);//将A[0]与最后一个有效元素A[i]交换
	AdjustDown(A, 0, i);//向下调整A[0]
	return ret;
}
//将data插入A[i]位置(i表示插入的下标位置)
void pushData(int A[], int i, int data){
	A[i] = data;//i的父亲节点(i-1)/2

	int j = (i - 1) / 2; //保证A[j]一直是A[i]的父节点
	while (j >= 0){
		if (A[j] < A[i]){
			swap(A, i, j);
			i = j; j = (j - 1) / 2; //j和i一直向上移动
		}
		else
			break;
	}
}
void test01(){
	int B[] = { 2, 5, 6, 0, 53, 17, 78, 90, 4, 65, 87, 32, -1 };
	const int n = sizeof(B) / sizeof(B[0]);
	
	int A[n] = { 0 };
	
	//创建大根堆(方法1): 通过逐个插入元素的方式
	for (int i = 0; i < n; i++){
		pushData(A, i, B[i]); //将B[i]逐个插入A，并实时调整A为大根堆
	}
	cout << "popData: ";
	for (int i = n - 1; i >= 0; i--){
		cout << popData(A, i) << "   ";
	}
	cout << endl;
}
void test02(){
	int A[] = { 2, 5, 6, 0, 53, 17, 78, 90, 4, 65, 87, 32, -1 };
	int n = sizeof(A) / sizeof(A[0]);

	BuildMaxHeap(A, n);
	cout << "popData: ";
	for (int i = n - 1; i >= 0; i--){
		cout << popData(A, i) << "   ";
	}
	cout << endl;
}
int main(){
	test01(); 
	test02();
	system("pause");
}
