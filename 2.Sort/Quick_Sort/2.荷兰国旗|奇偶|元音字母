//荷兰国旗
    A[i],l,r
        0: swap(A[l++],A[i++])
        1: i++
        2: swap(A[i],A[r--])
//荷兰国旗问题
//  0   1  2
void HeLanFlag(int A[], int N){
	int l = 0, r = N - 1;
	for (int i = 0; i <= r;){  //代码终止条件，当i<=r
		switch (A[i]){
		case 0:
			swap(A[l++], A[i++]);
			break;
		case 1:
			i++;
			break;
		case 2:
			swap(A[r], A[i]);
			r--;
		}
	}
}
int main(){
	int A[] = { 1,1,2,0,1,0,0,1,1,2,2,0,1,2,0,2};
	int len = sizeof(A) / sizeof(A[0]);
	HeLanFlag(A, len);
	for (int i = 0; i < len; i++)
		cout << A[i] << endl;
	system("pause");
}

//奇数移动到偶数前面
      void move(int A[], int N){
      int l = 0, r = N - 1;
      while (l < r){
        while (l < r && A[l] % 2 != 0) //奇数
          l++;
        while (l < r && A[r] % 2 == 0) //偶数
          r--;
        swap(A, l, r);
      }
    }
//反转字符串的元音字母
    unordered_set<char> asets = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }; //哈希表中存放着元音字母
    void reverseVowels(string& str){
      int l = 0, r = str.length() - 1;
      while (l < r){
        while (l < r && asets.find(str[l]) == asets.end()) //当前元素不是原因字母
          l++;
        while (l < r && asets.find(str[r]) == asets.end())//当前元素不是原因字母
          r--;
        swap(str[l++], str[r--]);
      }
    }
