[**非常经典**]给定一个数组，找到从1开始第一个不在里面的正整数
例如：[3,4,-1,1]，输出2

分析：
理想情况下,A[0],A[1],...,A[i],...A[N-1]上面存放的元素值应该是1,2,...,i+1,...N
A[i]满足的条件：[i+1,R]
解：
(0)设置一个变量R：表示当前数组的长度，初始时R=A.length()
(1)假设：当遍历到i位置时，假设A[0~i-1]位置上存放的值符合要求，分别为1,2,...,i
此时判断A[i]上存放的元素是否为i+1
(2)
  if A[i]==i+1:
    i++;  //满足条件，i向后继续遍历
  else{ //A[i]!=i+1
    A[i]上存放的元素可能有三种情况：
        1. 如果A[i]是(负无穷,i]范围上的数--->一定无效//A[i]是已经收集的数，或者，越界的数--->要将A[i]扔掉
        2. 如果A[i]是(R,正无穷)范围上的数--->一定无效//A[i]是越界的数--->要将A[i]扔掉
        3. 如果A[i]是[i+1,R]范围上的数，而A[i]应该放在A[i]-1位置上
            3.1 A[i] == A[A[i]-1] //可是发现此时A[i]-1位置上的数已经是A[i],说明出现了两个A[i],
                              //既然在[l+1,r]上出现了重复值，那么[l+1,R]范围上的数又少了一个--->要将A[i]扔掉
            3.2 A[i] != A[A[i]-1] //如果1，2，3.1条件都没中，说明发现了[l,R]上的数，并且此时并未发现重复。那么
                              //A[i]应该放在A[i]-1位置上，所以把i位置上的数和A[i]-1位置上的数交换

