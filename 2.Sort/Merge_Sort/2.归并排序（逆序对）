
void merge(int A[], int B[], int l, int mid, int r){
	int k = l;
	int i = l, j = mid + 1;
	while (i <= mid && j <= r){ //找到逆序点j,{ vec[i], vec[m+1,j] }
		if (A[i] > A[j]){
			for (int pos = mid + 1; pos <= j; pos++)
				ret.emplace_back(A[i], A[pos]);
		}
		B[k++] = A[i] < A[j] ? A[i++] : A[j++];
	}
	while (i <= mid)
		B[k++] = A[i++];
	while (j <= r)
		B[k++] = A[j++];
	for (int i = l; i <= r; i++)
		A[i] = B[i];
}
void merge_sort(int A[],int B[], int l, int r){
	if (l < r){
		int mid = (l + r) / 2;
		merge_sort(A, B, l, mid);
		merge_sort(A, B, mid + 1, r);
		merge(A, B, l, mid, r);
	}
}
int main(){
	int A[] = { 7, 5, 6, 4 };
	int len = sizeof(A) / sizeof(A[0]);
	int *B = new int[len + 1];
	merge_sort(A, B,0,len-1);
	cout << "逆序对" << endl;
	for (auto node : ret)
		cout << "  " << node.first << ", " << node.second << endl;

	system("pause");
}


=================================

vector<pair<int, int>> ret;
void merge(vector<int>& vec, vector<int> help, int l, int m, int r){
	int i = l, j = m + 1, k = l;
	while (i <= m && j <= r){
		if (vec[i] > vec[j]){ //找到逆序点j,{ vec[i], vec[m+1,j] }
			for (int k = m + 1; k <= j; k++)
				ret.emplace_back(vec[i], vec[k]);
		}
		help[k++] = vec[i] < vec[j] ? vec[i++] : vec[j++]; //取较小者
	}
	while (i <= m)
		help[k++] = vec[i++];
	while (j <= r)
		help[k++] = vec[j++];
	for (int i = l; i <= r; i++)
		vec[i] = help[i];
}

void MergeSort(vector<int>& vec, vector<int> help, int l, int r){
	if (l < r){
		int mid = (l + r) / 2;
		MergeSort(vec, help, l, mid);
		MergeSort(vec, help, mid + 1, r);
		merge(vec, help, l, mid, r);
	}
}
int main(){
	vector<int> vec = { 7,5,6,4 };
	vector<int> help(vec.size());
	MergeSort(vec, help, 0, vec.size() - 1);
	cout << "归并排序: ";
	for (int i = 0; i<vec.size(); i++)
		printf("%d ", vec[i]);
	cout << "\n逆序对" << endl;
	for (auto node : ret)
		printf("    [%d, %d]", node.first, node.second);
	system("pause");
}

==========================
