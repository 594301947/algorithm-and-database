
int sumRet = 0; //小和
void merge(vector<int>& vec, vector<int> help, int l, int m, int r){
	int i = l, j = m + 1, k = l;
	while (i <= m && j <= r){
		sumRet += (vec[i] < vec[j]) ? vec[i] * (r - j + 1) : 0; //数组小和
		help[k++] = vec[i] < vec[j] ? vec[i++] : vec[j++]; //取较小者
	}
	while (i <= m)
		help[k++] = vec[i++];
	while (j <= r)
		help[k++] = vec[j++];
	for (int i = l; i <= r; i++)
		vec[i] = help[i];
}

void MergeSort(vector<int>& vec, vector<int> help, int l, int r){
	if (l < r){
		int mid = (l + r) / 2;
		MergeSort(vec, help, l, mid);
		MergeSort(vec, help, mid + 1, r);
		merge(vec, help, l, mid, r);
	}
}
int main(){
	vector<int> vec = { 1,3,5,2,4,6 };
	vector<int> help(vec.size());
	
	MergeSort(vec, help, 0, vec.size() - 1);
	
	for (int i = 0; i<vec.size(); i++) //排序后，输出结果
		printf("%d ", vec[i]);

	printf("\n%d ", sumRet); //小和
	
	system("pause");
}



