二叉排序树(Binary Sort Tree)也叫二叉搜索树(Binary Search Tree)
   相关操作
	查找节点
	插入节点  |  使用插入节点的方式创建二叉树
	删除节点

#include<iostream>
using namespace std;
typedef int DataType;
typedef struct BST_Node {
	DataType data;
	struct BST_Node *lchild, *rchild;
}BST_T, *BST_P;


BST_P Search_BST(BST_P root, DataType key){
	if (root == NULL)
		return NULL;
	else {
		if (key == root->data)
			return root;
		else if (key > root->data)
			return Search_BST(root->rchild, key);
		else
			return Search_BST(root->lchild, key);
	}
}

//插入节点data
void Insert_BST(BST_P *root, DataType data){
	//0.判断data是否存在,存在就不插入
	if (Search_BST(*root, data) != NULL)
		return;
	
	//1.创建待插入节点data
	BST_P newNode = (BST_P)malloc(sizeof(struct BST_Node));
	newNode->data = data;
	newNode->lchild = NULL;
	newNode->rchild = NULL;
	if (*root == NULL){
		*root = newNode;
		return;
	}
		
	//2.寻找插入位置的父节点pre （插入位置总是在叶子节点）
	BST_P pre = NULL;//用pre保存插入位置的父节点
	BST_P cur = *root; //用cur遍历插入位置
	while (cur){
		pre = cur; //保存插入节点的父节点
		if (data > cur->data) 
			cur = cur->rchild; //向右查找插入位置
		else
			cur = cur->lchild; //向左查找插入位置
	}
	//3.插入
	if (data > pre->data)
		pre->rchild = newNode; 
	else
		pre->lchild = newNode;
}
//用逐个插入节点的方式，创建一颗二叉查找树
void CreateBST(BST_P *T, int a[], int n){
	 for (int i = 0; i < n; i++)
		Insert_BST(T, a[i]);
}
void DeleteBSpre(BST_P *root, DataType data){
	BST_P p = *root, parent = NULL, s = NULL;

	if (!p) return;

	//找到要删除的节点p
	if (p->data == data) {
		if (!p->rchild && !p->lchild)//1.p是叶子节点，直接删除
			*root = NULL;
		else if (!p->rchild && p->lchild)//2.1右子树为空
			*root = p->lchild;
		else if (!p->lchild && p->rchild)//2.2左子树为空
			*root = p->rchild;
		else//3.左右子树树都不为空
		{
			s = p->rchild;
			/* the s without left child */
			if (!s->lchild)
				s->lchild = p->lchild;
			/* the s have left child */
			else
			{
				/* find the smallest node in the left subtree of s */
				while (s->lchild)
				{
					/* record the parent node of s */
					parent = s;
					s = s->lchild;
				}
				parent->lchild = s->rchild;
				s->lchild = p->lchild;
				s->rchild = p->rchild;
			}
			*root = s;
		}
		free(p);
	}
	else if (data > p->data) //向右找
		DeleteBSpre(&(p->rchild), data);
	else if (data < p->data) //向左找
		DeleteBSpre(&(p->lchild), data);
}
//中序遍历
void InOrderTravel(BST_P T){
	if (T){
		InOrderTravel(T->lchild);
		cout << T->data << " ";
		InOrderTravel(T->rchild);
	}
}
int main()
{
	int arr[] = { 17, 12, 19, 10, 15, 18, 25, 8, 11, 13, 16, 22 };
	BST_P root = NULL;

	//创建二叉排序树
	CreateBST(&root, arr, 12);
	printf("遍历创建的树:");
	InOrderTravel(root);
	printf("\n");

	//在二叉排序树中查找节点12.
	BST_P result = Search_BST(root, 12);
	printf("查找元素:12 ");
	if (result == NULL)
		printf("查找失败\n");
	else{
		printf("指针=%d,指针的值=%d", result, result->data);
	}
	//在二叉排序树中插入9
	Insert_BST(&root, 9);
	printf("遍历插入元素后的树:");
	InOrderTravel(root);
	printf("\n");

	//删除二叉排序树中的节点12
	DeleteBSpre(&root, 12);
	printf("遍历删除元素后的树:");
	InOrderTravel(root);
}
