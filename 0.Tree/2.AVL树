二叉树-详解平衡二叉排序树AVL： https://blog.csdn.net/yixianfeng41/article/details/53229734
浅谈数据结构-平衡二叉树： https://www.cnblogs.com/polly333/p/4798944.html

使用场景：查找多，删除和插入少（由于调整平衡耗时更多）
其实实际应用中，AVL树的使用比较少，鸡肋：
    查找，使用B+树，SQL的索引
    增删，使用RB-Tree，调整速度更快

1.为什么出现AVL树？(很好的解决了二叉排序树退化成链表的问题)
  由于输入值不够随机--->造成树的极度不平衡--->查找效率低下--->为了避免这种情况，引出AVL树
2.定义和性质：
  满足二叉排序树
  左右子树的高度差的绝对值<=1
3.插入元素会导致平衡二叉树不平衡，应该如何调整？
二叉排序树恢复平衡方法：
(1)先找到插入节点后(插入位置必然是叶子节点)，距离该叶子节点最近的不平衡的祖先节点(记为Node)
(2)
有了单旋转操作，为什么还要有双旋转操作呢？
答案：
  因为插入元素导致不平衡时，存在"某条边"{没有拉直}的情况-->导致采用单旋转操作后的结果仍然是不平衡的；所以
需要先{拉直}操作//这是第一次旋转
  {拉直}操作完成后，在进行单旋转操作//这是第二次旋转

    单旋转操作：实际上是将Node"下沉"{注意：单旋转后，记得切掉JJ，重新连接JJ}
        左旋操作：Node左下沉
        右旋操作：Node右下沉
    双旋转操作：
        第一次旋转：先拉直，拉成一条直线
        第二次旋转：单旋转
  
4.时间复杂度分析
  AVL树的最好最坏情况下的查找/插入/删除操作的时间复杂度都是O(lgN)
