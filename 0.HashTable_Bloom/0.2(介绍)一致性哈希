
一致性哈希的两大优点：
    数据迁移；负载均衡

================================================================
背景：经典的分布式抗压结构
  假设工程师使用服务器集群来设计和实现数据库缓存，以下是常见的策略：
1.无论是增删改查，都先将数据的id通过哈希函数转换成一个哈希值（记为key）
2.如果目前有N台机器（编号为0~N-1），则通过 key%N 将数据放在对应的机器上，使每台机器上的数据分布均匀（负载均衡），以后的增删改查操作都在该机器上进行
问题：
  请分析缓存策略带来的问题，并提出改进方案

================================================================
存在的问题：
  如果增加/删除一台机器，那么mod M的M发生了变化M'---->导致原本存放的全部的数据都需要重新计算mod M'，再重新存放--->代价十分大

改进方案：一致性哈希  
    [1]分配哈希表区间：合理地确定哈希表的区间，[0,len-1]，首位相连，"顺时针"构成环形
    [2]机器入环：将M个机器，使用ip地址，先通过哈希函数，再mod len，会落到环中的每个位置MPos1,MPos2,...
    [3]数据入环：将数据，使用data_id，先通过哈希函数，再nod len，会落到环中的每个位置DataPos1,DataPos2,...
    [4]数据DataPos[i]存储到机器MPos[j]的策略：
        使用"二分查找"，查找第一个大于DataPos[i]的MPos[j]机器
        将数据DataPos[i]放入机器MPos[j]

Q1：当添加或删除机器时，数据如何进行迁移？
    (1)删除机器M[i]时:
        将M[i]中存放的数据，全部转移给M[i+1],其他的机器不发生任何变化
    (2)添加机器时：
        先根据机器的IP计算出在环中的位置，假设为M[j]
        数据转移：将原本存放在机器M[j+1]上的的数据[M[j-1],M[j]]，转移给新添加的M[j]机器保存
总结1：可以发现，当添加/删除机器M[i]时，只需要考虑机器M[i+1]与M[i]之间的数据迁移--->数据迁移效率非常高

Q2：如何解决负载均衡？（即机器入环后的位置，可能分布不均匀，造成负载不均衡的问题）
答案：虚拟节点机制
    (1)虚拟节点的产生：对每个机器M，通过多个哈希函数计算出多个哈希值，每个哈希值对应环的位置放置虚拟节点（服务节点）
    (2)实际机器节点与虚拟节点通过表进行映射
    (3)当查询到的数据落在某个虚拟节点上时，通过表找到实际机器节点，让实际机器节点提供服务    
  
