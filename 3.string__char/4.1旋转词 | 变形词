1.判断s1和s2是否互为旋转词
    a="cdab"，b="abcd"，返回true；
    a="1ab2"，b="ab12"，返回false；
    a="2ab1"，b="ab12"，返回true。
解：
  s2是否为s1+s1的子串——>KMP算法    int ret = (s1+s1).find(s2);   ret == -1?
  
bool isRotate(string a, string b){
	if (a.size() < 0 || b.size() < 0)
		return false;
	string tmp = a + a;
	int ret = tmp.find(b);
	return ret == -1 ? false : true;
}
int main(int argc, const char * argv[]) {
	string a = "abcd";
	bool b = isRotate(a, "cdab");
	cout << b << endl;
}
=================

2.str1和str2互为变形词：
  str1和str2的每个字符的种类一样，并且每种字符出现的次数也一样
解：哈希表：时间O(N)空间O(N)
  int map[256];//0~255
  (1)遍历str1，map[str[i]]++
  (2)遍历str2，map[str[j]]--
  (3)遍历map中的每个值，全部==0，返回true；否则返回false
  
