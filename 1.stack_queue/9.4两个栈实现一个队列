#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <assert.h>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <numeric>  
#include <queue>  
using namespace std;
#include<iostream>
#include<stack>
using namespace std;

//push永远进data栈；pop永远从help栈中拿

//1.如果data向help倒数据，必须一次性倒完
//2.如果help中有数据，data一定不要往help中倒数据
class myQueue{
private:
	stack<int> data;
	stack<int> help;
public:
	void push(int val){ //push永远进data栈
		data.push(val);
	}
	void pop(){ //pop永远从help栈中拿
		if (help.empty() && data.empty()){
			cout << "Queue空" << endl;
			return;
		}
		if (help.empty()){
			while (data.size() > 0){
				int tmp = data.top(); data.pop();
				help.push(tmp);
			}
		}
		help.pop();
	}
	int front(){ //pop永远从help栈中拿
		if (help.empty() && data.empty()){
			cout << "Queue空" << endl;
			return -1;
		}
		if (help.empty()){
			while (data.size() > 0){
				int tmp = data.top(); data.pop();
				help.push(tmp);
			}
		}
		return help.top();
	}
};
int main(){
	myQueue Q;
	Q.front();
	Q.push(1);
	Q.push(2);
	Q.push(3);
	cout << Q.front() << endl; Q.pop();  
	Q.push(4);
	Q.push(5);
	cout << Q.front() << endl; Q.pop(); 
	cout << Q.front() << endl; Q.pop(); 
	cout << Q.front() << endl; Q.pop();
	cout << Q.front() << endl; Q.pop();
	system("pasue");
}
