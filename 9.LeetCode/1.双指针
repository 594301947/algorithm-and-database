
//一个有序的数组，去重: i,j指针
//所有的快排partition问题，都用到双指针
//归并两个有序数组
//链表中的快慢指针: 判环；找mid节点；倒数第K个节点；反转

//在有序数组中找出两个数，使它们的和为 target。
int* TwoSum(int A[], int N, int target){
	int l = 0, r = N - 1;//l和r分别指向首尾
	int *ret = new int[2];
	while (l < r){//当二者不想撞时，判断sum是否等于target
		int sum = A[l] + A[r];
		if (sum == target){//等于，直接返回
			ret[0] = l; ret[1] = r;
			return ret;
		}
		else if (sum>target)//sum>target,r--
			r--;
		else
			l++;
	}
	return NULL;
}

//判断一个数是否为两个数的平方和
bool isSqrtSum(int Num){
	int l = 0, r = sqrt(Num); //注意r从Num的根号开始
	while (l < r){
		int sqrtSum = l*l + r*r;
		if (sqrtSum == Num)
			return true;
		else if (sqrtSum>Num)
			r--;
		else
			l++;
	}
	return false;
}
