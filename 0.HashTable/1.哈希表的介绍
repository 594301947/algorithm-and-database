
https://blog.csdn.net/yixianfeng41/article/details/53689303

使用哈希表的情况
实现原理
哈希函数的选择原则
哈希冲突
如何解决哈希冲突
Hash表的查找效率
时间复杂度
======================

使用哈希表的情况：
(1)STL中的unordered_
(2)数据库中的索引——>哈希索引||B+树索引

0.背景：
    之前介绍的线性表和树表的查找中，记录在表中的位置与记录的关键字不存在确定的关系，因此，在那些表中要进行关键字的比较，如> , < 等等，
它们是建立在”比较“基础上的，查找的效率取决于”比较次数“；
    而，Hash表是Key直接映射到Value，理想情况下，时间复杂度是O(1)，不是基于比较的
1.实现原理：
    给一个key，经过一个哈希函数，再mod S后，会映射到一个S域
2.常见Hash函数：
    平方取中法：取Key平方值的中间几位作为地址，适用于无法判断Key中哪几位分布比较均匀
    直接定址法：f(Key）= a*key+b线性函数，适应于Key基本连续的情况；如果Key不连续，会浪费地址空间
    除留取余法：f(Key）=key%p，取得合适的p是关键，p：是质数，且尽可能等于或接近表长
    折叠法：将Key分成位数相同的几部分，最后一位可以不同，取它们的和
    数字分析法： 如，分析生日
3.哈希冲突：
    不同的key，映射到S域相同的位置，会产生冲突
4.如何解决哈希冲突：
    [开放定址法]：
        线性探测法：发生冲突时，顺序查看表中的下一个地址单元，直到找到空闲单元
        平方探测法：优点—避免”堆积“；缺点—
        再哈希法：两个或多个Hash函数—如果其中一个Hash函数冲突，则采用下一个Hash函数确定地址，以此类推
        伪随机序列法
    [链地址法]：不同key映射到S域的相同位置，用链表的方式串联起来
    [建立公共溢出区]:
        将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表

5.Hash表的查找效率，取决于Hash函数，处理冲突的方法，装填因子（表中记录数m/表长n）
            Hash表的平均查找长度依赖于装填因子，而不直接依赖于m或n，可以看到，装填因子越大，则表装的越满，冲突几率越大
6.时间复杂度
    查找、插入、删除接近常量的时间即0(1）
