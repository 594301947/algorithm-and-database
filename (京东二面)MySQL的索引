面试官：MySQL的索引的数据结构？
我：bitmap，哈希索引，B+树索引
面试官：那么为什么用B+树索引，很少用Hash索引？
我：Hash索引的缺点：不能等值查询，范围查询，如不能"查找公司小于40岁的所有职员"
   哈希索引
        优点：速度非常快，只需要直接经过哈希函数在O(1)定位到S域中的位置
              不需要像B+树索引那样，需要从根节点到叶子节点的逐级查找
        缺点：不适用于以下几种情况————>
            (1)等值查询：== !=  IN  需要先找到该值所在的S域的位置；再遍历链表，直到找到相应的数据
            (2)排序相关的查询
                范围查询：此时哈希表就毫无用武之地了，因为原先有序的key，经过哈希函数后，可能变得不连续
                不能利用索引完成排序：与范围查询一样
                模糊查询：像like 'xxx%'，其实本质上也是范围查询
面试官：为什么使用B树而不使用B+树呢？
我：
    (1)B+树的中间节点不包括data，叶子节点保存数据，中间节点只用于索引
    --->数据量大的索引能达到亿万级别，为了减少内存的使用，使用B+树，因为B+树的中间节点不保存
    数据，只作为索引用来查询，叶子节点保存数据
    [补充：当查找到数据时，进行IO操作，将数据调入内存使用]
    (2)B+树的叶子节点保存data，并且是有序的--->遍历叶子节点就能获得全部的数据
面试官：B+树的实现原理
我：B+树是多路平衡查找树,其中M路的B+树的性质
    1.根节点的子树个数[2,M]
    2.中间节点的子树的个数[M/2(向上取整),M]
    3.所有的节点都在同一层，保存数据；形成链表

面试官：大招来了---->B树就这么一无是处么？
我：不是的！MongoDB，采用的B树而不是B+树-->数据模型简单，性能要求高的场合
B-树恰好key和data域聚合在一起，复杂度最好为O(1)。
    MongoDB是文档形的数据库，是一种nosql，它使用xml或json格式来保存数据，归属于聚合型数据库。
（键值数据库也属于聚合型数据库，比如redis）
